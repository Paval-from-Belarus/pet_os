[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
ASM_SOURCE_PATH = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/asm"
SCRIPTS_PATH = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/scripts"
OUTPUT_PATH = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target"
LOGS_PATH = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/logs"
DRIVERS_WORKSPACE = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/drivers"


IMAGES_PATH = "${OUTPUT_PATH}/images"
OBJECTS_PATH = "${OUTPUT_PATH}/shared"

KERNEL_LIB = "${OUTPUT_PATH}/target/release/libkernel.a"
TARGET_SPEC = "${SCRIPTS_PATH}/target.json"
LD_SCRIPT = "${SCRIPTS_PATH}/kernel.ld"
MAP_FILE = "${LOGS_PATH}/mapping-info.txt"
GRUB_CFG = "${SCRIPTS_PATH}/grub.cfg"

# assumed that wine is installed in system
# compiler accept two args: source code and output binary name
ASM_COMPILER = "wine ${SCRIPTS_PATH}/fasm.exe"
#fixme: conventional way to include specific macros
INCLUDE = "/home/Paval/Triggers/ASM/petOS"

# the output image file location
HDD_IMAGE = "${IMAGES_PATH}/petos.img"

KERNEL_BIN = "${OBJECTS_PATH}/kernel.bin"

[config]
default_to_workspace = false

[tasks.layout]
command = "mkdir"
args = ["-p", "${IMAGES_PATH}", "${LOGS_PATH}", "${OBJECTS_PATH}"]

[tasks.prune]
script = '''
    cargo clean
    cd ${DRIVERS_WORKSPACE}
    cargo clean

'''

[tasks.asm]
script = '''
    mkdir -p ${OBJECTS_PATH}
    ${ASM_COMPILER} ${ASM_SOURCE_PATH}/interceptors.asm ${OBJECTS_PATH}/interceptors.o
    ${ASM_COMPILER} ${ASM_SOURCE_PATH}/entry_grub.asm ${OBJECTS_PATH}/entry.o
    ${ASM_COMPILER} ${ASM_SOURCE_PATH}/ata_disk.asm ${OBJECTS_PATH}/ata_disk.o
'''

[tasks.check]
command = "cargo"
args = [
    "check",
    "-Z",
    "build-std=core,alloc,compiler_builtins",
    "-Z",
    "build-std-features=compiler-builtins-mem",
    "--target=${TARGET_SPEC}",
]

[tasks.kernel_bin.env]
STATIC_DRIVERS = "vga"
DRIVERS_OUT = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/drivers"

[tasks.kernel_bin]
dependencies = ["drivers"]
command = "cargo"
args = [
    "build",
    "-Z",
    "build-std=core,alloc,compiler_builtins",
    "-Z",
    "build-std-features=compiler-builtins-mem",
    "--target=${TARGET_SPEC}",
    "--release",
    # "--target-dir", "${OBJECTS_PATH}"
]

[tasks.drivers.env]
DRIVERS = "vga"
DRIVERS_OUT = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/drivers"
DRIVERS_PATH = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/drivers"

[tasks.drivers]
script = { file = "scripts/build_drivers.sh" }
# script = { file = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/scripts/build_drivers.sh"}

[tasks.fix]
command = "cargo"
args = [
    "fix",
    "-Z",
    "build-std=core,alloc,compiler_builtins",
    "-Z",
    "build-std-features=compiler-builtins-mem",
    "--release",
    "--target=${TARGET_SPEC}",
]

[tasks.kernel]
dependencies = ["layout", "asm", "kernel_bin"]
script = '''
    ld -n \
    --as-needed \
    --gc-sections \
    -Map=${MAP_FILE} \
    -T ${LD_SCRIPT} \
    -z max-page-size=0x1000 \
    -melf_i386 \
    -o ${KERNEL_BIN} \
    ${OBJECTS_PATH}/interceptors.o \
    ${OBJECTS_PATH}/entry.o \
    ${OBJECTS_PATH}/ata_disk.o \
    ${KERNEL_LIB} ;

    strip -s ${KERNEL_BIN} ;

    if grub2-file --is-x86-multiboot2 ${KERNEL_BIN}; then
        printf "Multiboot22 header check passed\n"
    else
        printf "Multiboot header check failed\n"
        exit 42
    fi ;

    stat ${KERNEL_BIN} | grep "Size: [[:digit:]]"


'''


[tasks.create_hdd_image]
dependencies = ["layout"]
script = '''
    # 1 MiB
    dd if=/dev/zero of=${HDD_IMAGE} bs=1024 count=10240
    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk ${HDD_IMAGE} 
      n # new partition
      p # primary partition
      1 # partition number 1
        # use default start sector 
        # use default last sector
      a # make it bootable
      w # write to disk
    EOF
'''

[tasks.image]
dependencies = ["layout", "kernel", "create_hdd_image"]
workspace = false
script = '''
    sudo losetup /dev/loop0 ${HDD_IMAGE} 
    sudo losetup /dev/loop1 ${HDD_IMAGE} -o 1048576

    sudo mkfs.fat -F32 /dev/loop1

    sudo mkdir -p /mnt/petos_build
    sudo mount /dev/loop1 /mnt/petos_build

    sudo mkdir -p /mnt/petos_build/boot/grub2
    sudo mkdir -p /mnt/petos_build/sys

    sudo grub2-install --boot-directory=/mnt/petos_build/boot --no-floppy \
    --modules="normal part_msdos multiboot disk drivemap" --target=i386-pc \
    --locales=uk \
    /dev/loop0

    sudo cp ${KERNEL_BIN} /mnt/petos_build/sys/io.sys
    sudo cp ${GRUB_CFG} /mnt/petos_build/boot/grub2/
    sync

    sudo umount /mnt/petos_build
    sudo rmdir /mnt/petos_build

    sudo losetup -d /dev/loop1
    sudo losetup -d /dev/loop0
'''
[tasks.unlock-image]
condition = { files_exist = ["${OUTPUT_PATH}.lock"] }
command = "rm"
args = ["${OUTPUT_PATH}.lock"]

[tasks.debug]
dependencies = ["image", "unlock-image"]
script = '''
    bochs-debugger -q -f ${SCRIPTS_PATH}/bochs-config.bxrc
'''

[tasks.run]
dependencies = ["image", "unlock-image"]
script = '''
    bochs -q -f ${SCRIPTS_PATH}/bochs-config.bxrc
'''
